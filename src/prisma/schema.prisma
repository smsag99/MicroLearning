generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  firstName    String            @default("")
  lastName     String            @default("")
  phone        String            @unique
  countryCode  String            @default("")
  password     String            @default("")
  refreshToken String            @default("")
  blocked      Boolean           @default(false)
  softDelete   Boolean           @default(false)
  address      String            @default("")
  courses      studentsOnClass[]
}

model Admin {
  id             Int      @id @unique @default(autoincrement())
  firstName      String   @default("")
  lastName       String   @default("")
  userName       String   @unique
  profilePhoto   String   @default("default.jpg")
  role           String   @default("")
  password       String   @default("")
  refreshToken   String   @default("")
  softDelete     Boolean  @default(false)
  permissions    Json     @db.JsonB
  // classes      Class[]
  teacherCourses Course[] @relation(name: "teacher")
  mentorCourses  Course[] @relation(name: "mentor")
}

// model Class {
//   id        Int               @id @default(autoincrement())
//   course    Course            @relation(fields: [courseID], references: [id])
//   courseID  Int
//   mentor    Admin             @relation(fields: [mentorID], references: [id])
//   mentorID  Int
//   title     String
//   startTime DateTime
//   endTime   DateTime
//   isLocked  Boolean           @default(false)
//   capacity  Int               @default(0)
//   students  studentsOnClass[]
// }

model studentsOnClass {
  id        Int      @id @default(autoincrement())
  student   User     @relation(fields: [userID], references: [id])
  userID    Int
  course    Course   @relation(fields: [courseID], references: [id])
  courseID  Int
  mark      Int      @default(0)
  progress  Float    @default(0.0)
  startTime DateTime
  endTime   DateTime
  quizes    Json[]   @db.JsonB
  done      Int[]
}

model Course {
  id          Int               @id @default(autoincrement())
  teacher     Admin             @relation(name: "teacher", fields: [teacherID], references: [id])
  teacherID   Int
  mentor      Admin             @relation(name: "mentor", fields: [mentorID], references: [id])
  mentorID    Int
  title       String
  description String
  rate        Int?
  taskcount   Int?
  startTime   DateTime
  endTime     DateTime
  isLocked    Boolean           @default(false)
  seasons     season[]
  students    studentsOnClass[]
  // classes Class[]
}

model season {
  id       Int       @id @default(autoincrement())
  course   Course    @relation(fields: [courseID], references: [id])
  courseID Int
  title    String
  priority Int
  chapters chapter[]
}

model chapter {
  id       Int    @id @default(autoincrement())
  season   season @relation(fields: [seasonID], references: [id])
  seasonID Int
  title    String @default("")
  priority Int    @default(0)
  tasks    task[]
}

model task {
  id         Int     @id @default(autoincrement())
  chapter    chapter @relation(fields: [chapterID], references: [id])
  chapterID  Int
  title      String  @default("")
  priority   Int     @default(0)
  content    Json    @db.JsonB
  timeToRead Int     @default(1)
  type       String
}

//model Quize {
//  id   Int    @id @default(autoincrement())
//  row1 String @default("")
//  row2 String @default("")
//  row3 String @default("")
//}

//model test {
//  id   Int    @id @default(autoincrement())
//  name String @default("")
//}
